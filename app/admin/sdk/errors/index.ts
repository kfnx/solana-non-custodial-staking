/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * ArithmeticError: 'Failed to perform math operation safely'
 *
 * @category Errors
 * @category generated
 */
export class ArithmeticErrorError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'ArithmeticError'
  constructor() {
    super('Failed to perform math operation safely')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ArithmeticErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new ArithmeticErrorError())
createErrorFromNameLookup.set(
  'ArithmeticError',
  () => new ArithmeticErrorError()
)

/**
 * AnchorSerializationIssue: 'Anchor serialization issue'
 *
 * @category Errors
 * @category generated
 */
export class AnchorSerializationIssueError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'AnchorSerializationIssue'
  constructor() {
    super('Anchor serialization issue')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AnchorSerializationIssueError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new AnchorSerializationIssueError())
createErrorFromNameLookup.set(
  'AnchorSerializationIssue',
  () => new AnchorSerializationIssueError()
)

/**
 * InvalidUserState: 'Unauthorized, invalid user state PDA'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserStateError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidUserState'
  constructor() {
    super('Unauthorized, invalid user state PDA')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidUserStateError())
createErrorFromNameLookup.set(
  'InvalidUserState',
  () => new InvalidUserStateError()
)

/**
 * UserNeverStake: 'Cannot claim, user never stake anything'
 *
 * @category Errors
 * @category generated
 */
export class UserNeverStakeError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'UserNeverStake'
  constructor() {
    super('Cannot claim, user never stake anything')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UserNeverStakeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new UserNeverStakeError())
createErrorFromNameLookup.set('UserNeverStake', () => new UserNeverStakeError())

/**
 * EmptyVault: 'Vault empty, nothing to unstake'
 *
 * @category Errors
 * @category generated
 */
export class EmptyVaultError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'EmptyVault'
  constructor() {
    super('Vault empty, nothing to unstake')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EmptyVaultError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new EmptyVaultError())
createErrorFromNameLookup.set('EmptyVault', () => new EmptyVaultError())

/**
 * NotWhitelisted: 'NFT creator address is not present in any of the whitelists'
 *
 * @category Errors
 * @category generated
 */
export class NotWhitelistedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'NotWhitelisted'
  constructor() {
    super('NFT creator address is not present in any of the whitelists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotWhitelistedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new NotWhitelistedError())
createErrorFromNameLookup.set('NotWhitelisted', () => new NotWhitelistedError())

/**
 * NotStaked: 'NFT is not present in any stake proof'
 *
 * @category Errors
 * @category generated
 */
export class NotStakedError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'NotStaked'
  constructor() {
    super('NFT is not present in any stake proof')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotStakedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new NotStakedError())
createErrorFromNameLookup.set('NotStaked', () => new NotStakedError())

/**
 * CannotUnstakeYet: 'NFT is in lock period, cannot unstake yet until it reach minimum staking period'
 *
 * @category Errors
 * @category generated
 */
export class CannotUnstakeYetError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'CannotUnstakeYet'
  constructor() {
    super(
      'NFT is in lock period, cannot unstake yet until it reach minimum staking period'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotUnstakeYetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new CannotUnstakeYetError())
createErrorFromNameLookup.set(
  'CannotUnstakeYet',
  () => new CannotUnstakeYetError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
