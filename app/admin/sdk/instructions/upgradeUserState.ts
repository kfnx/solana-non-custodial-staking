/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpgradeUserState
 * @category generated
 */
export const upgradeUserStateStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'UpgradeUserStateInstructionArgs'
)
/**
 * Accounts required by the _upgradeUserState_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [] actualUser
 * @property [] config
 * @property [_writable_] oldUserState
 * @property [_writable_] newUserState
 * @category Instructions
 * @category UpgradeUserState
 * @category generated
 */
export type UpgradeUserStateInstructionAccounts = {
  user: web3.PublicKey
  actualUser: web3.PublicKey
  config: web3.PublicKey
  oldUserState: web3.PublicKey
  newUserState: web3.PublicKey
}

export const upgradeUserStateInstructionDiscriminator = [
  58, 159, 23, 225, 240, 227, 53, 67,
]

/**
 * Creates a _UpgradeUserState_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category UpgradeUserState
 * @category generated
 */
export function createUpgradeUserStateInstruction(
  accounts: UpgradeUserStateInstructionAccounts
) {
  const { user, actualUser, config, oldUserState, newUserState } = accounts

  const [data] = upgradeUserStateStruct.serialize({
    instructionDiscriminator: upgradeUserStateInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: actualUser,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: oldUserState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: newUserState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'stakEUMMv9bRHYX4CyVY48i19ViBdNSzn8Rt1a1Fi6E'
    ),
    keys,
    data,
  })
  return ix
}
