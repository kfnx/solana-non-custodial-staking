/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Stake
 * @category generated
 */
export const stakeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'StakeInstructionArgs'
)
/**
 * Accounts required by the _stake_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] userState
 * @property [_writable_] config
 * @property [_writable_] stakeInfo
 * @property [_writable_] tokenAccount
 * @property [] delegate
 * @property [] edition
 * @property [] mint
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category Stake
 * @category generated
 */
export type StakeInstructionAccounts = {
  user: web3.PublicKey
  userState: web3.PublicKey
  config: web3.PublicKey
  stakeInfo: web3.PublicKey
  tokenAccount: web3.PublicKey
  delegate: web3.PublicKey
  edition: web3.PublicKey
  mint: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
}

export const stakeInstructionDiscriminator = [
  206, 176, 202, 18, 200, 209, 179, 108,
]

/**
 * Creates a _Stake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Stake
 * @category generated
 */
export function createStakeInstruction(accounts: StakeInstructionAccounts) {
  const {
    user,
    userState,
    config,
    stakeInfo,
    tokenAccount,
    delegate,
    edition,
    mint,
    tokenMetadataProgram,
  } = accounts

  const [data] = stakeStruct.serialize({
    instructionDiscriminator: stakeInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: userState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: delegate,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: edition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'stk4YMX6gbb5EL9T2d2UN4AWrGu2p8PzZCF4JQumAfJ'
    ),
    keys,
    data,
  })
  return ix
}
