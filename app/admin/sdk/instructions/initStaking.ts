/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category InitStaking
 * @category generated
 */
export const initStakingStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "InitStakingInstructionArgs"
);
/**
 * Accounts required by the _initStaking_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] config
 * @property [_writable_] userState
 * @category Instructions
 * @category InitStaking
 * @category generated
 */
export type InitStakingInstructionAccounts = {
  user: web3.PublicKey;
  config: web3.PublicKey;
  userState: web3.PublicKey;
};

export const initStakingInstructionDiscriminator = [
  42, 18, 242, 224, 66, 32, 122, 8,
];

/**
 * Creates a _InitStaking_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitStaking
 * @category generated
 */
export function createInitStakingInstruction(
  accounts: InitStakingInstructionAccounts
) {
  const { user, config, userState } = accounts;

  const [data] = initStakingStruct.serialize({
    instructionDiscriminator: initStakingInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: userState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "stakEUMMv9bRHYX4CyVY48i19ViBdNSzn8Rt1a1Fi6E"
    ),
    keys,
    data,
  });
  return ix;
}
