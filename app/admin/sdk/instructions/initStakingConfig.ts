/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitStakingConfig
 * @category generated
 */
export type InitStakingConfigInstructionArgs = {
  bumpConfigAuth: number
  rewardRate: beet.bignum
  minStakingPeriodSec: beet.bignum
}
/**
 * @category Instructions
 * @category InitStakingConfig
 * @category generated
 */
export const initStakingConfigStruct = new beet.BeetArgsStruct<
  InitStakingConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bumpConfigAuth', beet.u8],
    ['rewardRate', beet.u64],
    ['minStakingPeriodSec', beet.u64],
  ],
  'InitStakingConfigInstructionArgs'
)
/**
 * Accounts required by the _initStakingConfig_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_, **signer**] config
 * @property [] creatorAddressToWhitelist
 * @property [_writable_] configAuthority
 * @property [_writable_] rewardPot
 * @property [] rewardMint
 * @category Instructions
 * @category InitStakingConfig
 * @category generated
 */
export type InitStakingConfigInstructionAccounts = {
  admin: web3.PublicKey
  config: web3.PublicKey
  creatorAddressToWhitelist: web3.PublicKey
  configAuthority: web3.PublicKey
  rewardPot: web3.PublicKey
  rewardMint: web3.PublicKey
}

export const initStakingConfigInstructionDiscriminator = [
  240, 182, 125, 61, 234, 36, 53, 64,
]

/**
 * Creates a _InitStakingConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitStakingConfig
 * @category generated
 */
export function createInitStakingConfigInstruction(
  accounts: InitStakingConfigInstructionAccounts,
  args: InitStakingConfigInstructionArgs
) {
  const {
    admin,
    config,
    creatorAddressToWhitelist,
    configAuthority,
    rewardPot,
    rewardMint,
  } = accounts

  const [data] = initStakingConfigStruct.serialize({
    instructionDiscriminator: initStakingConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: config,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: creatorAddressToWhitelist,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: configAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: rewardPot,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: rewardMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'stakEUMMv9bRHYX4CyVY48i19ViBdNSzn8Rt1a1Fi6E'
    ),
    keys,
    data,
  })
  return ix
}
