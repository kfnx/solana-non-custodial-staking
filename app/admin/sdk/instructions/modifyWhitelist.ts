/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ModifyWhitelist
 * @category generated
 */
export const modifyWhitelistStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ModifyWhitelistInstructionArgs'
)
/**
 * Accounts required by the _modifyWhitelist_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] config
 * @property [] creatorAddressToWhitelist
 * @category Instructions
 * @category ModifyWhitelist
 * @category generated
 */
export type ModifyWhitelistInstructionAccounts = {
  admin: web3.PublicKey
  config: web3.PublicKey
  creatorAddressToWhitelist: web3.PublicKey
}

export const modifyWhitelistInstructionDiscriminator = [
  186, 220, 49, 3, 161, 249, 168, 199,
]

/**
 * Creates a _ModifyWhitelist_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ModifyWhitelist
 * @category generated
 */
export function createModifyWhitelistInstruction(
  accounts: ModifyWhitelistInstructionAccounts
) {
  const { admin, config, creatorAddressToWhitelist } = accounts

  const [data] = modifyWhitelistStruct.serialize({
    instructionDiscriminator: modifyWhitelistInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: creatorAddressToWhitelist,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'stkMasspWTzjjNfRNb8v2QW8Hza73baxMqJ3mEi7LUW'
    ),
    keys,
    data,
  })
  return ix
}
