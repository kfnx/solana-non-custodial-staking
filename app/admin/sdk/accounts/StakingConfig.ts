/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link StakingConfig}
 * @category Accounts
 * @category generated
 */
export type StakingConfigArgs = {
  admin: web3.PublicKey
  rewardPot: web3.PublicKey
  rewardMint: web3.PublicKey
  configAuthority: web3.PublicKey
  configAuthoritySeed: web3.PublicKey
  configAuthorityBumpSeed: number[] /* size: 1 */
  rewardRate: beet.bignum
  rewardAccrued: beet.bignum
  nftsStaked: beet.bignum
  initiatedUsers: beet.bignum
  activeStakers: beet.bignum
  minStakingPeriodSec: beet.bignum
  creatorWhitelist: web3.PublicKey
}

const stakingConfigDiscriminator = [45, 134, 252, 82, 37, 57, 84, 25]
/**
 * Holds the data for the {@link StakingConfig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StakingConfig implements StakingConfigArgs {
  private constructor(
    readonly admin: web3.PublicKey,
    readonly rewardPot: web3.PublicKey,
    readonly rewardMint: web3.PublicKey,
    readonly configAuthority: web3.PublicKey,
    readonly configAuthoritySeed: web3.PublicKey,
    readonly configAuthorityBumpSeed: number[] /* size: 1 */,
    readonly rewardRate: beet.bignum,
    readonly rewardAccrued: beet.bignum,
    readonly nftsStaked: beet.bignum,
    readonly initiatedUsers: beet.bignum,
    readonly activeStakers: beet.bignum,
    readonly minStakingPeriodSec: beet.bignum,
    readonly creatorWhitelist: web3.PublicKey
  ) {}

  /**
   * Creates a {@link StakingConfig} instance from the provided args.
   */
  static fromArgs(args: StakingConfigArgs) {
    return new StakingConfig(
      args.admin,
      args.rewardPot,
      args.rewardMint,
      args.configAuthority,
      args.configAuthoritySeed,
      args.configAuthorityBumpSeed,
      args.rewardRate,
      args.rewardAccrued,
      args.nftsStaked,
      args.initiatedUsers,
      args.activeStakers,
      args.minStakingPeriodSec,
      args.creatorWhitelist
    )
  }

  /**
   * Deserializes the {@link StakingConfig} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [StakingConfig, number] {
    return StakingConfig.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StakingConfig} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<StakingConfig> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find StakingConfig account at ${address}`)
    }
    return StakingConfig.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link StakingConfig} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StakingConfig, number] {
    return stakingConfigBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link StakingConfig} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stakingConfigBeet.serialize({
      accountDiscriminator: stakingConfigDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StakingConfig}
   */
  static get byteSize() {
    return stakingConfigBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StakingConfig} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StakingConfig.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link StakingConfig} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === StakingConfig.byteSize
  }

  /**
   * Returns a readable version of {@link StakingConfig} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      admin: this.admin.toBase58(),
      rewardPot: this.rewardPot.toBase58(),
      rewardMint: this.rewardMint.toBase58(),
      configAuthority: this.configAuthority.toBase58(),
      configAuthoritySeed: this.configAuthoritySeed.toBase58(),
      configAuthorityBumpSeed: this.configAuthorityBumpSeed,
      rewardRate: (() => {
        const x = <{ toNumber: () => number }>this.rewardRate
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rewardAccrued: (() => {
        const x = <{ toNumber: () => number }>this.rewardAccrued
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      nftsStaked: (() => {
        const x = <{ toNumber: () => number }>this.nftsStaked
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      initiatedUsers: (() => {
        const x = <{ toNumber: () => number }>this.initiatedUsers
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      activeStakers: (() => {
        const x = <{ toNumber: () => number }>this.activeStakers
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minStakingPeriodSec: (() => {
        const x = <{ toNumber: () => number }>this.minStakingPeriodSec
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      creatorWhitelist: this.creatorWhitelist.toBase58(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stakingConfigBeet = new beet.BeetStruct<
  StakingConfig,
  StakingConfigArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['admin', beetSolana.publicKey],
    ['rewardPot', beetSolana.publicKey],
    ['rewardMint', beetSolana.publicKey],
    ['configAuthority', beetSolana.publicKey],
    ['configAuthoritySeed', beetSolana.publicKey],
    ['configAuthorityBumpSeed', beet.uniformFixedSizeArray(beet.u8, 1)],
    ['rewardRate', beet.u64],
    ['rewardAccrued', beet.u64],
    ['nftsStaked', beet.u64],
    ['initiatedUsers', beet.u64],
    ['activeStakers', beet.u64],
    ['minStakingPeriodSec', beet.u64],
    ['creatorWhitelist', beetSolana.publicKey],
  ],
  StakingConfig.fromArgs,
  'StakingConfig'
)
